name: Deploy to Railway

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: bist_ai_trader_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d bist_ai_trader_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-docker.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Run linting
      run: |
        # Install flake8 for linting
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Create test directories
      run: |
        mkdir -p data/historical data/models data/logs data/snapshots
        mkdir -p logs
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bist_ai_trader_test
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Run basic health check test
        python -c "
        import asyncio
        import sys
        sys.path.insert(0, '.')
        
        async def test_imports():
            try:
                from core.cache import CacheManager
                from core.database import DatabaseManager
                from monitoring.metrics import metrics_collector
                print('‚úÖ All critical imports successful')
                return True
            except Exception as e:
                print(f'‚ùå Import failed: {e}')
                return False
        
        result = asyncio.run(test_imports())
        sys.exit(0 if result else 1)
        "
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bist_ai_trader_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        # Start the application in background for testing
        uvicorn fastapi_main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Run health check
        curl -f http://localhost:8000/health || exit 1
        
        # Run load test (light version)
        cd testing
        python -c "
        import asyncio
        import aiohttp
        
        async def test_endpoints():
            async with aiohttp.ClientSession() as session:
                # Test health endpoint
                async with session.get('http://localhost:8000/health') as resp:
                    if resp.status != 200:
                        raise Exception(f'Health check failed: {resp.status}')
                    
                # Test metrics endpoint  
                async with session.get('http://localhost:8000/metrics') as resp:
                    if resp.status != 200:
                        raise Exception(f'Metrics failed: {resp.status}')
                
                print('‚úÖ All endpoint tests passed')
        
        asyncio.run(test_endpoints())
        "
        
        # Stop the application
        kill $APP_PID || true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements-docker.txt
        format: json
        output: security-report.json
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Staging
      run: |
        railway login --browserless
        railway environment staging
        railway up --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Test staging deployment
      run: |
        # Get staging URL from Railway
        STAGING_URL=$(railway environment staging domain)
        if [ -n "$STAGING_URL" ]; then
          curl -f "https://${STAGING_URL}/health" || exit 1
          echo "‚úÖ Staging deployment successful"
        else
          echo "‚ö†Ô∏è Could not get staging URL"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Production
      run: |
        railway login --browserless
        railway environment production
        railway up --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Wait for deployment
      run: sleep 120
    
    - name: Test production deployment
      run: |
        # Get production URL from Railway
        PROD_URL=$(railway environment production domain)
        if [ -n "$PROD_URL" ]; then
          curl -f "https://${PROD_URL}/health" || exit 1
          echo "‚úÖ Production deployment successful"
        else
          echo "‚ö†Ô∏è Could not get production URL"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Run post-deployment tests
      run: |
        PROD_URL=$(railway environment production domain)
        if [ -n "$PROD_URL" ]; then
          # Test multiple endpoints
          curl -f "https://${PROD_URL}/health"
          curl -f "https://${PROD_URL}/metrics"
          curl -f "https://${PROD_URL}/cache/stats"
          echo "‚úÖ All production tests passed"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Notify deployment success
      run: |
        echo "üéâ BIST AI Smart Trader deployed successfully to production!"
        echo "üîó Production URL: https://$(railway environment production domain)"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
